name: CI

on:
  push:
    branches:
      - master
      - develop
    paths-ignore:
      - docs/**
      - README.md
      - LICENSE
  pull_request:
    branches:
      - develop
    paths-ignore:
      - docs/**
      - README.md
      - LICENSE

jobs:
  build:
    name: JDK 1.8
    runs-on: macOS-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      # 実行権限を付与
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Install JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Install Android SDK
        uses: malinskiy/action-android/install-sdk@release/0.0.5
      - name: Build project
        run: ./gradlew assemble --stacktrace
      - name: Run instrumentation tests
        uses: malinskiy/action-android/emulator-run-cmd@release/0.0.5
        with:
          cmd: ./gradlew connectedCheck --stacktrace
          api: 25
          tag: default
          abi: x86
  test:
    runs-on: ubuntu-latest
    steps:
      # チェックアウト
      - uses: actions/checkout@v2

      # 実行権限を付与
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # JDKのセットアップ
      - name: set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: "zulu"
          java-version: "11"

      # Gradleのキャッシュ復元
      - uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # テスト
      - name: Test with Gradle
        run: ./gradlew test --stacktrace

      # コードカバレッジをJaCoCo形式で取得
      - name: Get code coverage for JaCoCo
        run: ./gradlew jacocoDebugTestReport

      # コードカバレッジをCodecovへアップロード
      - name: Upload code coverage to Codecov
        run: bash <(curl -s https://codecov.io/bash)
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      # テスト結果とコードカバレッジのアップロード
      - name: Upload test results and code coverage Artifact
        uses: actions/upload-artifact@v2
        if: success() || failure()
        with:
          name: results
          path: |
            **/build/reports/tests/**/*
            **/build/reports/test-results/**/*
            **/build/reports/jacoco/**/*
          if-no-files-found: warn
          retention-days: 14

  lint:
    runs-on: ubuntu-latest
    steps:
      # チェックアウト
      - uses: actions/checkout@v2

      # 実行権限を付与
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # 静的解析
      - name: Run Inspection
        run: ./gradlew lint

      # 結果の表示
      - name: Show results on GitHub
        uses: yutailang0119/action-android-lint@v1
        with:
          xml_path: "**/build/reports/lint-results-*.xml"

      # アーティファクトへアップロード
      - name: Upload results Artifact
        uses: actions/upload-artifact@v2
        if: success() || failure()
        with:
          name: results
          path: |
            **/build/reports/lint-results-*.html
            **/build/reports/lint-results-*.xml
          if-no-files-found: error
          retention-days: 14

  ktlint:
    runs-on: ubuntu-latest

    steps:
      # チェックアウト
      - uses: actions/checkout@v2

      # 実行権限を付与
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # 静的解析
      - name: Run ktlint
        run: ./gradlew ktlint
